{{- $key := "gateway" -}}
{{- $component := get .Values.components.kyverno.components $key  -}}
{{- if and .Values.components.kyverno.enabled $component.enabled -}}
{{- $istio := .Values.components.istio -}}

{{- $name := list $key $ | include "platform-tenant.format.name.local" -}}
{{- $namespace := $.Values.components.istio.components.gateway.namespace -}}

{{- include "backblazeplatform.common.require.api.kyverno.cluster-policy" . -}}

{{- $certManager := .Values.components.certManager -}}

{{- if and $certManager.enabled (not $certManager.issuerRef) -}}
  {{- fail ".Values.components.certManager.issuerRef needs to be defined." -}}
{{- end -}}
{{- $certName := ( printf "%s-cert" ( "request.object.metadata.name" | include "backblazeplatform.common.format.literal" ) | quote) -}}
{{- include "backblazeplatform.common.require.api.cert-manager.certificate" . -}}

---
apiVersion: kyverno.io/v1
kind: Policy
metadata:
  name: {{ printf "%s-cert-create" $name }}
  namespace: {{ $namespace }}
  labels: {{- include "backblazeplatform.common.chartLabels" $ | nindent 4 }}
  annotations:
    policies.kyverno.io/title: Gateway policy
    policies.kyverno.io/category: Networking
    policies.kyverno.io/description: |
      Creates certificates on domains.
spec:
  validationFailureAction: enforce
  rules:
    - name: generate-certificate
      match:
        resources:
          kinds:
            - Gateway
      preconditions:
        any:
          - key: {{ printf "request.object.spec.servers[*].hosts[?ends_with(@,'%s')][] | length(@)" $component.domains | include "backblazeplatform.common.format.literal" | quote }}
            operator: GreaterThan
            value: 0
      generate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        name: {{ $certName }}
        namespace: {{ $namespace }}
        data:
          metadata:
            name: {{ $certName }}
            labels: {{- include "backblazeplatform.common.chartLabels" $ | nindent 14 }}
            ownerReferences:
              - apiVersion: {{ "request.object.apiVersion" | include "backblazeplatform.common.format.literal" | quote }}
                kind: {{ "request.object.kind" | include "backblazeplatform.common.format.literal" | quote }}
                name: {{ "request.object.metadata.name" | include "backblazeplatform.common.format.literal" | quote }}
                uid: {{ "request.object.metadata.uid" | include "backblazeplatform.common.format.literal" | quote }}
                controller: true
                blockOwnerDeletion: true
          spec:
            secretName: {{ "request.object.spec.servers[?port.protocol == 'HTTPS' && (tls && tls.mode == 'SIMPLE' && tls.credentialName) ].tls.credentialName | @[0]" | include "backblazeplatform.common.format.literal" | quote }}
            issuerRef: {{- $certManager.issuerRef | toYaml | nindent 14 }}
            dnsNames: {{ "request.object.spec.servers[?port.protocol == 'HTTPS' && (tls && tls.mode == 'SIMPLE' && tls.credentialName) ].hosts | @[]" | include "backblazeplatform.common.format.literal" | quote }}
{{- end }}
